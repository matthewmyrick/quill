name: "Build Quill"
description: "Standardized build process for Quill across CI and release workflows"
inputs:
  target:
    description: "Target architecture to build for"
    required: true
  release:
    description: "Whether to build in release mode"
    required: false
    default: "false"
  run-tests:
    description: "Whether to run tests before building"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ inputs.target }}

    - name: Install dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install openssl pkg-config
          if [ "${{ inputs.target }}" = "x86_64-apple-darwin" ]; then
            # Install Intel Homebrew if it doesn't exist
            if [ ! -f /usr/local/bin/brew ]; then
              echo "Installing Intel Homebrew..."
              arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            # Install x86_64 OpenSSL for Intel builds
            arch -x86_64 /usr/local/bin/brew install openssl pkg-config
            OPENSSL_PATH=$(arch -x86_64 /usr/local/bin/brew --prefix openssl)
            echo "OPENSSL_ROOT_DIR=$OPENSSL_PATH" >> $GITHUB_ENV
          else
            # Use ARM64 OpenSSL for Apple Silicon builds
            echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          fi
        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          # Set OpenSSL paths for GNU Linux builds
          if [[ "${{ inputs.target }}" == "x86_64-unknown-linux-gnu" ]]; then
            echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV
          elif [[ "${{ inputs.target }}" == "x86_64-unknown-linux-musl" ]]; then
            sudo apt-get install -y musl-tools musl-dev
            # Install static OpenSSL for musl builds
            wget -O - https://github.com/openssl/openssl/releases/download/openssl-3.0.15/openssl-3.0.15.tar.gz | tar xzf -
            cd openssl-3.0.15
            # Fix musl compatibility: replace linux/mman.h with sys/mman.h if it exists
            if grep -q "linux/mman.h" crypto/mem_sec.c 2>/dev/null; then
              sed -i 's|#   include <linux/mman.h>|#   include <sys/mman.h>|g' crypto/mem_sec.c
            fi
            # Create target directory first
            sudo mkdir -p /usr/local/musl/lib /usr/local/musl/include
            CC=musl-gcc ./Configure linux-x86_64 no-shared no-async no-engine --prefix=/usr/local/musl --openssldir=/usr/local/musl
            make -j$(nproc) || { echo "OpenSSL make failed"; exit 1; }
            sudo make install_sw || { echo "OpenSSL install failed"; exit 1; }
            cd ..
            # Handle lib64 vs lib directory issue
            if [[ -d "/usr/local/musl/lib64" ]] && [[ ! -d "/usr/local/musl/lib" ]]; then
              sudo ln -s /usr/local/musl/lib64 /usr/local/musl/lib
            fi
            # Verify installation
            if [[ ! -f "/usr/local/musl/lib/libssl.a" && ! -f "/usr/local/musl/lib64/libssl.a" ]]; then
              echo "OpenSSL installation verification failed"
              ls -la /usr/local/musl/ || true
              ls -la /usr/local/musl/lib/ || true
              ls -la /usr/local/musl/lib64/ || true
              exit 1
            fi
            echo "OPENSSL_DIR=/usr/local/musl" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=/usr/local/musl/lib" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=/usr/local/musl/include" >> $GITHUB_ENV
            echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          fi
        fi

    - name: Run tests
      if: inputs.run-tests == 'true'
      shell: bash
      run: cargo test --target ${{ inputs.target }}
      env:
        # Set OpenSSL paths for macOS
        OPENSSL_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_ROOT_DIR || env.OPENSSL_DIR }}
        PKG_CONFIG_PATH: ${{ runner.os == 'macOS' && format('{0}/lib/pkgconfig', env.OPENSSL_ROOT_DIR) || '' }}
        PKG_CONFIG_ALLOW_CROSS: ${{ inputs.target == 'x86_64-apple-darwin' && '1' || '' }}
        # Set macOS deployment target to match runner version
        MACOSX_DEPLOYMENT_TARGET: ${{ runner.os == 'macOS' && '14.0' || '' }}

    - name: Build
      shell: bash
      run: cargo build ${{ inputs.release == 'true' && '--release' || '' }} --target ${{ inputs.target }}
      env:
        # Set OpenSSL paths for macOS
        OPENSSL_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_ROOT_DIR || env.OPENSSL_DIR }}
        PKG_CONFIG_PATH: ${{ runner.os == 'macOS' && format('{0}/lib/pkgconfig', env.OPENSSL_ROOT_DIR) || '' }}
        PKG_CONFIG_ALLOW_CROSS: ${{ inputs.target == 'x86_64-apple-darwin' && '1' || '' }}
        # Set macOS deployment target to match runner version
        MACOSX_DEPLOYMENT_TARGET: ${{ runner.os == 'macOS' && '14.0' || '' }}
        # Set OpenSSL static linking for musl
        OPENSSL_STATIC: ${{ env.OPENSSL_STATIC }}

