name: 'Build Quill'
description: 'Standardized build process for Quill across CI and release workflows'
inputs:
  target:
    description: 'Target architecture to build for'
    required: true
  release:
    description: 'Whether to build in release mode'
    required: false
    default: 'false'
  run-tests:
    description: 'Whether to run tests before building'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ inputs.target }}
        override: true

    - name: Install dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install openssl pkg-config
          if [ "${{ inputs.target }}" = "x86_64-apple-darwin" ]; then
            # Install Intel Homebrew if it doesn't exist
            if [ ! -f /usr/local/bin/brew ]; then
              echo "Installing Intel Homebrew..."
              arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            # Install x86_64 OpenSSL for Intel builds
            arch -x86_64 /usr/local/bin/brew install openssl pkg-config
            OPENSSL_PATH=$(arch -x86_64 /usr/local/bin/brew --prefix openssl)
            echo "OPENSSL_ROOT_DIR=$OPENSSL_PATH" >> $GITHUB_ENV
          else
            # Use ARM64 OpenSSL for Apple Silicon builds
            echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          fi
        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          if [[ "${{ inputs.target }}" == "x86_64-unknown-linux-musl" ]]; then
            sudo apt-get install -y musl-tools
            if [[ "${{ inputs.release }}" == "true" ]]; then
              # Install static OpenSSL for musl release builds
              sudo apt-get install -y musl-dev
              wget -O - https://github.com/openssl/openssl/releases/download/openssl-3.0.15/openssl-3.0.15.tar.gz | tar xzf -
              cd openssl-3.0.15
              CC=musl-gcc ./Configure linux-x86_64 no-shared no-async --prefix=/usr/local/musl --openssldir=/usr/local/musl
              make -j$(nproc)
              sudo make install_sw
              cd ..
              echo "OPENSSL_DIR=/usr/local/musl" >> $GITHUB_ENV
              echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
            fi
          fi
        fi

    - name: Run tests
      if: inputs.run-tests == 'true'
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --target ${{ inputs.target }}
      env:
        # Set OpenSSL paths for macOS
        OPENSSL_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_ROOT_DIR || env.OPENSSL_DIR }}
        PKG_CONFIG_PATH: ${{ runner.os == 'macOS' && format('{0}/lib/pkgconfig', env.OPENSSL_ROOT_DIR) || '' }}
        PKG_CONFIG_ALLOW_CROSS: ${{ inputs.target == 'x86_64-apple-darwin' && '1' || '' }}
        # Set macOS deployment target to match runner version
        MACOSX_DEPLOYMENT_TARGET: ${{ runner.os == 'macOS' && '14.0' || '' }}

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: ${{ inputs.release == 'true' && '--release' || '' }} --target ${{ inputs.target }}
      env:
        # Set OpenSSL paths for macOS
        OPENSSL_DIR: ${{ runner.os == 'macOS' && env.OPENSSL_ROOT_DIR || env.OPENSSL_DIR }}
        PKG_CONFIG_PATH: ${{ runner.os == 'macOS' && format('{0}/lib/pkgconfig', env.OPENSSL_ROOT_DIR) || '' }}
        PKG_CONFIG_ALLOW_CROSS: ${{ inputs.target == 'x86_64-apple-darwin' && '1' || '' }}
        # Set macOS deployment target to match runner version
        MACOSX_DEPLOYMENT_TARGET: ${{ runner.os == 'macOS' && '14.0' || '' }}
        # Set OpenSSL static linking for musl
        OPENSSL_STATIC: ${{ env.OPENSSL_STATIC }}