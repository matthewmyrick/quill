name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install openssl pkg-config
            if [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
              # Install Intel Homebrew if it doesn't exist
              if [ ! -f /usr/local/bin/brew ]; then
                echo "Installing Intel Homebrew..."
                arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
              fi
              # Install x86_64 OpenSSL for Intel builds
              arch -x86_64 /usr/local/bin/brew install openssl pkg-config
              OPENSSL_PATH=$(arch -x86_64 /usr/local/bin/brew --prefix openssl)
              echo "OPENSSL_ROOT_DIR=$OPENSSL_PATH" >> $GITHUB_ENV
            else
              # Use ARM64 OpenSSL for Apple Silicon builds
              echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
            fi
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y pkg-config libssl-dev
            if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
              sudo apt-get install -y musl-tools
            fi
          fi

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target ${{ matrix.target }}
        env:
          # Set OpenSSL paths for macOS
          OPENSSL_DIR: ${{ matrix.os == 'macos-latest' && env.OPENSSL_ROOT_DIR || '' }}
          PKG_CONFIG_PATH: ${{ matrix.os == 'macos-latest' && format('{0}/lib/pkgconfig', env.OPENSSL_ROOT_DIR) || '' }}
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.target == 'x86_64-apple-darwin' && '1' || '' }}
          # Set macOS deployment target to match runner version
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-latest' && '14.0' || '' }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }}
        env:
          # Set OpenSSL paths for macOS
          OPENSSL_DIR: ${{ matrix.os == 'macos-latest' && env.OPENSSL_ROOT_DIR || '' }}
          PKG_CONFIG_PATH: ${{ matrix.os == 'macos-latest' && format('{0}/lib/pkgconfig', env.OPENSSL_ROOT_DIR) || '' }}
          PKG_CONFIG_ALLOW_CROSS: ${{ matrix.target == 'x86_64-apple-darwin' && '1' || '' }}
          # Set macOS deployment target to match runner version
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-latest' && '14.0' || '' }}