name: Auto Tag and Release

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  auto-tag-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for version labels
        id: check_labels
        run: |
          LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          echo "Labels: $LABELS"
          
          if echo "$LABELS" | grep -q "major"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "minor"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "patch"; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          else
            echo "No version label found. Skipping release."
            echo "bump_type=none" >> $GITHUB_OUTPUT
          fi

      - name: Get latest tag
        id: get_latest_tag
        if: steps.check_labels.outputs.bump_type != 'none'
        run: |
          # Get the latest tag, or default to v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate new version
        id: calc_version
        if: steps.check_labels.outputs.bump_type != 'none'
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.check_labels.outputs.bump_type }}"
          
          # Remove 'v' prefix if it exists
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment based on bump type
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create and push tag
        if: steps.check_labels.outputs.bump_type != 'none'
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and push tag
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"
          
          echo "Created and pushed tag: $NEW_VERSION"

      - name: Create release
        if: steps.check_labels.outputs.bump_type != 'none'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.calc_version.outputs.new_version }}
          name: Release ${{ steps.calc_version.outputs.new_version }}
          body: |
            ## Changes
            
            This release was automatically created from PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}
            
            **Type:** ${{ steps.check_labels.outputs.bump_type }} release
            
            ### Pull Request Details
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}